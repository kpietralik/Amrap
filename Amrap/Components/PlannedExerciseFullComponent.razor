@using Amrap.Components;
@using Amrap.Core;
@using Amrap.Core.Domain;
@using Amrap.Core.Infrastructure;
@using Bit.BlazorUI

@inject DatabaseHandler _databaseHandler;
@inject NavigationManager _navigationManager;

@if (WorkoutPlanItem != null && PlannedExercise != null)
{
    @if (DisplayExerciseTypeLink)
    {

        <ExerciseTypeViewComponent ExerciseType="@PlannedExercise.ExerciseType">
            <BitActionButton IconName="BitIconName.Send" OnClick="OnPlannedExerciseClick" />
        </ExerciseTypeViewComponent>
    }
    else
    {
        <ExerciseTypeViewComponent ExerciseType="@PlannedExercise.ExerciseType" />
    }
    @if (DisplayWorkoutPlanItem)
    {
        <WorkoutPlanItemViewComponent WorkoutPlanItem="@WorkoutPlanItem" >
        </WorkoutPlanItemViewComponent>
    }
    <PlannedExerciseViewComponent ShowStartingExercisePlan="false" PlannedExercise="@PlannedExercise" />
    <BitAccordion @bind-IsExpanded="IsExpanded">
        <BitNumericTextField Label="Sets" LabelPosition="BitNumericTextFieldLabelPosition.Left" Step="@(1)" Min="1" ShowArrows="true" @bind-Value="@newSets" />
        <BitNumericTextField Label="Reps" LabelPosition="BitNumericTextFieldLabelPosition.Left" Step="@(1)" Min="1" ShowArrows="true" @bind-Value="@newReps" />
        <BitNumericTextField Label="Weight" LabelPosition="BitNumericTextFieldLabelPosition.Left" Step="@(0.5)" Min="1" IconName="BitIconName.Weights"
            Suffix=" kg" ShowArrows="true" @bind-Value="@newWeight" />
        <div class="container text-center">
            <div class="row">
                <div class="col-6">
                    <BitToggle Label="Drop Set" Style="margin: 0 auto;" IsInlineLabel="true" @bind-Value="@newDropSet" />
                </div>
                <div class="col-6">
                    <BitToggle Label="To failure" Style="margin: 0 auto;" IsInlineLabel="true" @bind-Value="@newToFailure" />
                </div>
            </div>
            <div class="row">
                <div class="col-4">
                    <BitActionButton Style="margin-left: 0px; margin-right: auto;" IconName="BitIconName.Send" OnClick="Complete">Complete</BitActionButton>
                </div>
                <div class="col-4">
                    <BitActionButton Style="margin-left: auto; margin-right: auto;" IconName="BitIconName.Edit" OnClick="Edit">Edit</BitActionButton>
                </div>
                <div class="col-4">
                    <BitActionButton Style="margin-left: auto; margin-right: 0px;" IconName="BitIconName.Delete" OnClick="Delete">Delete</BitActionButton>
                </div>
            </div>
        </div>
        <IsCompleted Completed="@completed"/>
        <IsDeleted Deleted="@deleted"/>
    </BitAccordion>
}

@code {
    [Parameter]
    public WorkoutPlanItem WorkoutPlanItem { get; set; }

    [Parameter]
    public PlannedExercise PlannedExercise { get; set; }

    [Parameter]
    public bool DisplayWorkoutPlanItem { get; set; }

    [Parameter]
    public bool DisplayExerciseTypeLink { get; set; }

    [Parameter]
    public bool IsExpanded { get; set; } = false;

    private int newSets { get; set; }
    private int newReps { get; set; }
    private double newWeight { get; set; }
    private bool newDropSet;
    private bool newToFailure;

    private bool completed = false;
    private bool deleted = false;

    // See for other option with separate service: https://jonhilton.net/blazor-sibling-communication/
    [Parameter]
    public EventCallback<string> OnComplete { get; set; }

    protected override async Task OnInitializedAsync()
    {
        PlannedExercise = WorkoutPlanItem.PlannedExercises.Single(x => x.Guid == PlannedExercise.Guid);

        newSets = PlannedExercise.GetSets();
        newReps = PlannedExercise.GetReps();
        newWeight = PlannedExercise.GetWeight();
        newDropSet = PlannedExercise.GetDropSet();
        newToFailure = PlannedExercise.GetToFailure();
    }

    public async Task Complete()
    {
        var completedExercise = new CompletedExercise(
            PlannedExercise.ExerciseType,
            DateTime.Now,
            newSets,
            newReps,
            (float)newWeight,
            newDropSet,
            newToFailure);

        await completedExercise.SaveCompletedExercise(_databaseHandler, PlannedExercise);
        completed = true;

        await OnComplete.InvokeAsync(WorkoutPlanItem.Guid);
    }

    public void Edit()
    {
        _navigationManager.NavigateTo($"/EditPlannedExercise/{PlannedExercise.Guid}/{true}");
    }

    public void OnPlannedExerciseClick()
    {
        _navigationManager.NavigateTo($"/plannedexercise/{WorkoutPlanItem.Guid}/{PlannedExercise.Guid}");
    }

    public async Task Delete()
    {
        var r = await App.Current.MainPage.DisplayActionSheet(
            $"Delete {PlannedExercise.ExerciseType.Name}?", "Cancel", "Delete");

        if (r == "Delete")
        {
            WorkoutPlanItem.PlannedExercises.Remove(PlannedExercise);
            await PlannedExercise.Delete(_databaseHandler);

            deleted = true;
        }
    }
}
