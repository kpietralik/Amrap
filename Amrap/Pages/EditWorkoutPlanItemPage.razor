@page "/WorkoutPlanItem/{WorkoutPlanItemGuid}"

@using Amrap.Components
@using Amrap.Core;
@using Amrap.Core.Domain;
@using Amrap.Enum;
@using Amrap.Core.Infrastructure;
@using Bit.BlazorUI

@inject NavigationManager _navigationManager
@inject DatabaseHandler _databaseHandler;

<PageTitle>@title</PageTitle>
<BitLabel>@title</BitLabel>

@if (workoutPlanItem != default)
{
    <BitTextField Label="Title" IsUnderlined="true" @bind-Value="workoutPlanItem.Title" />
    <BitChoiceGroup Label="Day" Items="DayOfWeekList.Items" @bind-Value="workoutPlanItem.Day" />

    <BitActionButton IconName="BitIconName.CirclePlus" OnClick="NewExercise">New Exercise</BitActionButton>

    <BitBasicList Items="workoutPlanItem.PlannedExercises"
                  EnableVirtualization="false"
                  Style="border: 1px #a19f9d solid; border-radius: 3px; height: 100%">
        <RowTemplate Context="item">
            <div @key="item.Guid" style="border-bottom: 3px #8a8886 solid; padding: 2px 10px; margin: 5px;">
                <PlannedExercisePreviewComponent WorkoutPlanItem="workoutPlanItem" PlannedExercise="item" >
                    <BitActionButton IconName="BitIconName.Delete" AriaLabel="Remove planned exercise" OnClick="async () => await RemovePlannedExercise(item)">Remove</BitActionButton>
                </PlannedExercisePreviewComponent>
                <BitActionButton IconName="BitIconName.Edit" AriaLabel="Edit planned exercise" OnClick="() => EditPlannedExercise(item)">Edit</BitActionButton>
                <div class="container text-center">
                    <div class="row">
                        <div class="col">
                            <BitActionButton IconName="BitIconName.ChevronDownMed" OnClick="async () => await MoveDown(item)" />
                        </div>
                        <div class="col">
                            <BitActionButton IconName="BitIconName.ChevronUpMed" OnClick="async () => await MoveUp(item)" />
                        </div>
                    </div>
                </div>
            </div>
        </RowTemplate>
    </BitBasicList>

    <BitNumericTextField LabelPosition="BitNumericTextFieldLabelPosition.Left" Label="Priority" IsEnabled="false" Value="@workoutPlanItem.Priority" />

    <BitButton Style="margin-top: 20px;" OnClick="Save">Save</BitButton>

    <BitActionButton IconName="BitIconName.Delete" AriaLabel="Delete workout plan item" OnClick="Delete">Delete workout plan item</BitActionButton>

}
else
{
    <h3>Loading..</h3>
}

@code {
    [Parameter]
    public string WorkoutPlanItemGuid { get; set; }

    private const string title = "Edit workout plan item";

    private WorkoutPlanItem workoutPlanItem;

    protected override async Task OnInitializedAsync()
    {
        workoutPlanItem = await _databaseHandler.GetWorkoutPlanItem(WorkoutPlanItemGuid);
    }

    private async Task Save()
    {
        await workoutPlanItem.Upsert(_databaseHandler);

        _navigationManager.NavigateTo("/");
    }

    private async Task Delete()
    {
        var r = await App.Current.MainPage.DisplayActionSheet(
            $"Delete workout plan item?", "Cancel", "Delete");

        if (r == "Delete")
        {
            await workoutPlanItem.Delete(_databaseHandler);

            _navigationManager.NavigateTo("/");
        }
    }

    private async Task MoveDown(PlannedExercise itemToMove)
    {
        var ll = new LinkedList<PlannedExercise>(workoutPlanItem.PlannedExercises);

        var nodeToMove = ll.Find(itemToMove);
        var nodeToMoveAfter = nodeToMove?.Next;
        if (nodeToMove != null && nodeToMoveAfter != null)
        {
            ll.Remove(nodeToMove);
            ll.AddAfter(nodeToMoveAfter, nodeToMove);
        }
        else
            return; // Was not found (error?) or last item in the list

        // ToDo: Perf could be improved by skipping all before entries but keeping code as is will help in first migration of Priority
        //       This is also resilient to item deletion
        await RewritePriority(ll);

        workoutPlanItem.PlannedExercises = Sort(ll);
    }

    private async Task MoveUp(PlannedExercise itemToMove)
    {
        var ll = new LinkedList<PlannedExercise>(workoutPlanItem.PlannedExercises);

        var nodeToMove = ll.Find(itemToMove);
        var nodeToMoveBefore = nodeToMove?.Previous;
        if (nodeToMove != null && nodeToMoveBefore != null)
        {
            ll.Remove(nodeToMove);
            ll.AddBefore(nodeToMoveBefore, nodeToMove);
        }
        else
            return; // Was not found (error?) or first item in the list

        // ToDo: Perf could be improved by skipping all after entries but keeping code as is will help in first migration of Priority
        //       This is also resilient to item deletion
        await RewritePriority(ll);

        workoutPlanItem.PlannedExercises = Sort(ll);
    }

    private async Task RemovePlannedExercise(PlannedExercise plannedExercise)
    {
        var r = await App.Current.MainPage.DisplayActionSheet(
            $"Delete planned exercise?", "Cancel", "Delete");
        
        if (r == "Delete")
        {
            workoutPlanItem.PlannedExercises.Remove(plannedExercise);

            await RewritePriority(workoutPlanItem.PlannedExercises);

            await workoutPlanItem.Upsert(_databaseHandler);
            await plannedExercise.Delete(_databaseHandler);
        }
    }

    private async Task RewritePriority(IEnumerable<PlannedExercise> plannedExercises)
    {
        int i = 0;
        foreach (var ex in plannedExercises)
        {
            ex.Priority = i;
            i++;
            await ex.Upsert(_databaseHandler);
        }
    }

    private IList<PlannedExercise> Sort(IEnumerable<PlannedExercise> items)
    {
        return items.OrderBy(x => x.Priority).ToList();
    }

    private void EditPlannedExercise(PlannedExercise plannedExercise)
    {
        _navigationManager.NavigateTo($"/EditPlannedExercise/{plannedExercise.Guid}/{false}");

    }

    private void NewExercise()
    {
        _navigationManager.NavigateTo($"/exercisetypes/{workoutPlanItem.Guid}");
    }
}
