@page "/"
@using Amrap.Core;
@using Amrap.Core.Domain;
@using Amrap.Core.Infrastructure;
@using Amrap.Enum;
@using Bit.BlazorUI

@inject DatabaseHandler _databaseHandler

<PageTitle>Amrap App</PageTitle>

<div class="container text-center">
    <div class="row">
        <div class="col">
            <BitDropdown Items="DayOfWeekList.FilteringDayOfWeekItems()"
                            Placeholder="Select day"
                            ShowClearButton="false"
                            OnSelectItem="OnSelectItemDayOfWeek"
                            Style="width: 100%; max-width: 290px; margin: 20px 0 20px 0">
            </BitDropdown>
        </div>
        <div class="col">
            <BitToggleButton @bind-IsChecked="onlyCompletedToday"
                                Class="tgl-btn"
                                Label="Completed"
                                IconName=@(onlyCompletedToday ? BitIconName.Completed : BitIconName.CompletedSolid)
                                OnChange="OnChangeOnlyCompletedToday"
                                ButtonStyle="BitButtonStyle.Primary">
            </BitToggleButton>
        </div>
    </div>
</div>

@if (displayedItems == null)
{
    <h1>Loading..</h1>
}
else if (displayedItems != null)
{
    <div class="container text-center">
        <div class="row">
            <div class="col-6">
                <BitTextField IsUnderlined="false" HasBorder="false" IsReadonly="true" Value="@workoutPlanText" />
            </div>
            <div class="col-3">
                <BitIconButton IconName="BitIconName.Filter" OnClick="async () => await FilterToggle()" />
            </div>
            <div class="col-3">
                <BitIconButton IconName="BitIconName.Refresh" OnClick="ReloadLists" />
            </div>
        </div>
        @if (filterToggle)
        {
        <div class="row">
                <div class="col">
                <BitTextField IconName="BitIconName.Filter" IsUnderlined="false" HasBorder="true" @bind-Value="filterValue" OnChange="async () => await OnFilterValueChange()" />
            </div>
        </div>
        }
    </div>    

    <BitBasicList Items="displayedItems"
                  EnableVirtualization="false"
                  Style="border: 1px #a19f9d solid; border-radius: 3px; height: 100%">
        <RowTemplate Context="item">
            <div @key="item.Guid" style="border-bottom: 3px #8a8886 solid; padding: 2px 10px; margin: 5px;">
                <WorkoutPlanItemComponent WorkoutPlanItem="@item" OnComplete="ReloadLists" />
            </div>
        </RowTemplate>
    </BitBasicList>
}
<br />
@if (errorCought)
{
    <BitMessageBar MessageBarType="@BitMessageBarType.Error">
        @errorMessage
    </BitMessageBar>
}

@code {
    private IOrderedEnumerable<WorkoutPlanItem> orderedWorkoutPlanItems;

    private IList<WorkoutPlanItem> displayedItems = null;
    private IEnumerable<CompletedExercise> completedToday = null;

    private bool onlyCompletedToday = false;
    private DayOfWeek? selectedDayOfWeek = null;

    private bool filterToggle = false;
    private string filterValue = string.Empty;

    private bool errorCought = false;
    private string errorMessage;

    private string workoutPlanText => $"Workout plan ({displayedItems.Count()})";

    protected override async Task OnInitializedAsync()
    {
        try {
            if (!_databaseHandler.HasInitialized)
            {
                await _databaseHandler.CreateConnectionAndTables();
            }

            await ReloadLists();
        }
        catch (Exception ex)
        {
            errorMessage = ex.ToString();
            errorCought = true;
        }
    }

    private async Task FilterToggle() {
        filterToggle = !filterToggle;
        filterValue = string.Empty;
        displayedItems = await SetDisplayedItems(selectedDayOfWeek, onlyCompletedToday, filterValue);
    }

    private async Task OnFilterValueChange()
    {
        if (!filterToggle)
            return;

        displayedItems = await SetDisplayedItems(selectedDayOfWeek, onlyCompletedToday, filterValue);
    }

    private async Task OnSelectItemDayOfWeek(BitDropdownItem dropdownItem)
    {
        if (string.Equals(dropdownItem.Value, DayOfWeekList.All, StringComparison.InvariantCultureIgnoreCase))
            selectedDayOfWeek = null;
        else 
            selectedDayOfWeek = Enum.Parse<DayOfWeek>(dropdownItem.Value);

        displayedItems = await SetDisplayedItems(selectedDayOfWeek, onlyCompletedToday, filterValue);
    }

    private async Task OnChangeOnlyCompletedToday(bool enabled)
    {
        onlyCompletedToday = enabled;
        displayedItems = await SetDisplayedItems(selectedDayOfWeek, onlyCompletedToday, filterValue);
    }

    private async Task ReloadLists()
    {
        var workoutPlanItems = await _databaseHandler.GetWorkoutPlan();
        orderedWorkoutPlanItems = workoutPlanItems.OrderBy(x => x.Day).ThenBy(x => x.Priority);

        displayedItems = await SetDisplayedItems(selectedDayOfWeek, onlyCompletedToday, filterValue);
    }

    private async Task<IList<WorkoutPlanItem>> SetDisplayedItems(DayOfWeek? dayOfWeek, bool hideCompleted, string filterValue)
    {
        if (hideCompleted)
        {
            completedToday = await CompletedExercise.GetExercisesCompletedToday(_databaseHandler, DateTime.UtcNow);

            return orderedWorkoutPlanItems
                .Where(x => FilterByDay(x, dayOfWeek))
                .Where(x => FilterByNotCompleted(completedToday, x))
                .Where(x => FilterByValue(x, filterValue))
                .ToList();
        }
        else
        {
            return orderedWorkoutPlanItems
                .Where(x => FilterByDay(x, dayOfWeek))
                .Where(x => FilterByValue(x, filterValue))
                .ToList();
        }
    }

    private bool FilterByDay(WorkoutPlanItem item, DayOfWeek? dayOfWeek)
        => dayOfWeek.HasValue ? item.Day == dayOfWeek.Value : true;

    private bool FilterByNotCompleted(IEnumerable<CompletedExercise> recentylCompletedExercises, WorkoutPlanItem workoutPlanItem)
        => !completedToday.Any(compl => workoutPlanItem.PlannedExercises.Select(x => x.ExerciseTypeGuid).Contains(compl.ExerciseTypeGuid));

    private bool FilterByValue(WorkoutPlanItem item, string value)
        => string.IsNullOrEmpty(value) ||
           item.Title?.Contains(value, StringComparison.InvariantCultureIgnoreCase) == true ||
           item.PlannedExercises?.Any(x => x.ExerciseType.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase)) == true;
}