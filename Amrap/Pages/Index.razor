@page "/"
@using Amrap.Core;
@using Amrap.Core.Domain;
@using Amrap.Core.Infrastructure;
@using Amrap.Enum;
@using Bit.BlazorUI

@inject DatabaseHandler _databaseHandler
@inject WorkoutPlanReader _workoutPlanReader;

<PageTitle>Amrap App</PageTitle>

<BitAccordion>
    <HeaderTemplate Context="isExpanded">
        <BitIconButton IconName="isExpanded ? BitIconName.ChevronDown : BitIconName.ChevronRight" />
        <div class="custom-header">
            <span class="custom-title">Filter</span>
        </div>
    </HeaderTemplate>
    <ChildContent>
        <div class="container text-center">
            <div class="row">
                <div class="col">
                    <BitDropdown Items="DayOfWeekList.FilteringDayOfWeekItems()"
                                 Placeholder="Select day"
                                 ShowClearButton="false"
                                 OnSelectItem="OnSelectItemDayOfWeek"
                                 Style="width: 100%; max-width: 290px; margin: 20px 0 20px 0">
                    </BitDropdown>
                </div>
                <div class="col">
                    <BitToggleButton @bind-IsChecked="onlyCompletedToday"
                                     Class="tgl-btn"
                                     Label="Completed"
                                     IconName=@(onlyCompletedToday ? BitIconName.Completed : BitIconName.CompletedSolid)
                                     OnChange="OnChangeOnlyCompletedToday"
                                     ButtonStyle="BitButtonStyle.Primary">
                    </BitToggleButton>
                </div>
            </div>
        </div>
    </ChildContent>
</BitAccordion>

@if (displayedItems == null)
{
    <h1>Loading..</h1>
}
else if (displayedItems != null)
{
    <div class="container text-center">
        <div class="row">
            <div class="col-8">
                <h3>Workout plan (@displayedItems.Count())</h3>
            </div>
            <div class="col-4">
                <BitIconButton IconName="BitIconName.Refresh" OnClick="ReloadLists" />
            </div>
        </div>
    </div>    

    <BitBasicList Items="displayedItems"
                  EnableVirtualization="false"
                  Style="border: 1px #a19f9d solid; border-radius: 3px; height: 100%">
        <RowTemplate Context="item">
            <div @key="item.Guid" style="border-bottom: 1px #8a8886 solid; padding: 2px 10px; margin: 5px;">
                <WorkoutPlanItemComponent Item="@item" OnComplete="ReloadLists" />
            </div>
        </RowTemplate>
    </BitBasicList>
}
<br />
@if (errorCought)
{
    <BitMessageBar MessageBarType="@BitMessageBarType.Error">
        @errorMessage
    </BitMessageBar>
}

@code {
    private IOrderedEnumerable<WorkoutPlanItem> orderedWorkoutPlanItems;

    private IList<WorkoutPlanItem> displayedItems = null;
    private IEnumerable<CompletedExercise> completedToday = null;

    private bool onlyCompletedToday = false;
    private DayOfWeek? selectedDayOfWeek = null;

    private bool errorCought = false;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        if (!_databaseHandler.HasInitialized)
        {
            await _databaseHandler.CreateConnectionAndTables();
        }

        try {
            await ReloadLists();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            errorCought = true;
        }
    }

    private async Task OnSelectItemDayOfWeek(BitDropdownItem dropdownItem)
    {
        if (string.Equals(dropdownItem.Value, DayOfWeekList.All, StringComparison.InvariantCultureIgnoreCase))
            selectedDayOfWeek = null;
        else 
            selectedDayOfWeek = Enum.Parse<DayOfWeek>(dropdownItem.Value);

        displayedItems = await SetDisplayedItems(selectedDayOfWeek, onlyCompletedToday);
    }

    private async Task OnChangeOnlyCompletedToday(bool enabled)
    {
        onlyCompletedToday = enabled;
        displayedItems = await SetDisplayedItems(selectedDayOfWeek, onlyCompletedToday);
    }

    private async Task ReloadLists()
    {
        orderedWorkoutPlanItems = await _workoutPlanReader.GetWorkoutPlan();
        displayedItems = await SetDisplayedItems(selectedDayOfWeek, onlyCompletedToday);
    }

    private async Task<IList<WorkoutPlanItem>> SetDisplayedItems(DayOfWeek? dayOfWeek, bool hideCompleted)
    {
        if (hideCompleted)
        {
            completedToday = await _databaseHandler.GetExercisesCompletedToday(DateTime.UtcNow);

            return orderedWorkoutPlanItems
                .Where(x => FilterByDay(x, dayOfWeek))
                .Where(x => FilterByNotCompleted(completedToday, x))
                .ToList();
        }
        else
        {
            return orderedWorkoutPlanItems
                .Where(x => FilterByDay(x, dayOfWeek))
                .ToList();
        }
    }

    private bool FilterByDay(WorkoutPlanItem item, DayOfWeek? dayOfWeek)
        => dayOfWeek.HasValue ? item.Day == dayOfWeek.Value : true;

    private bool FilterByNotCompleted(IEnumerable<CompletedExercise> recentylCompletedExercises, WorkoutPlanItem workoutPlanItem)
        => !completedToday.Any(compl => compl.ExerciseTypeGuid == workoutPlanItem.PlannedExercise.ExerciseTypeGuid);
}