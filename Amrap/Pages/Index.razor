@page "/"
@using Amrap.Core;
@using Amrap.Core.Domain;
@using Amrap.Infrastructure.Db;
@using Amrap.Core.Models;

@inject DatabaseHandler _databaseHandler
@inject WorkoutPlanRetriever _workoutPlanRetriever;
@inject CompletedExerciseSaver _completedExerciseSaver;

<PageTitle>Amrap App</PageTitle>
<h1>AMRAP</h1>
<br />
<h1>Workout plan</h1>
@if (workoutPlanItems != null)
{
    <div class="container mx-auto font-mono flex-auto bg-gray-400">    
        <div class="flex flex-row">
            <div class="basis-3/4 py-2"><p class="text-xl font-bold">Exercises (@workoutPlanItems.Count)</p> </div>
        </div>
        <div>
            <ul class="flex flex-col w-full">
                @foreach (var item in workoutPlanItems)
                {
                    <WorkoutPlanItemComponent Item="@item" />
                }
            </ul>
        </div>
    </div>
}

@code {
    private IList<WorkoutPlanItem> workoutPlanItems;

    protected override async Task OnInitializedAsync()
    {
        if (!_databaseHandler.HasInitialized)
        {
            await _databaseHandler.CreateConnectionAndTables();

            var t1 = new ExerciseTypeModel("ec2b1e30-d65b-42e1-9cd9-988e45790c5c", ExerciseKind.Push, "Deadlift", "Deadlift (standard)", null);
            var t2 = new ExerciseTypeModel("84d9a6d2-7a03-4a06-91e5-227d96411adf", ExerciseKind.Push, "Bench press", null, null);
            var t3 = new ExerciseTypeModel("3b14f0b8-cf1c-401f-9022-3de6c66a4240", ExerciseKind.Pull, "Cable upright row", null, null);

            await _databaseHandler.SeedExerciseTypes(new List<ExerciseTypeModel>() { t1, t2, t3 });

            var p1 = new PlannedExerciseModel("f99c6db3-420e-466a-86d6-99e792031cc5", t1, 2, 5, 65, null, false, false);
            var p2 = new PlannedExerciseModel("e33fc5f8-42ff-4232-81db-4b88a9cc2eea", t2, 3, 6, 45, null, false, false);
            var p3 = new PlannedExerciseModel("9b4dc290-cff8-4362-b737-efe1bbceb1db", t3, 3, 12, 60, null, false, false);

            // TODO resolved Missmatch. Ids are updated by different thread?
            await _databaseHandler.AddPlannedExercise(p1);
            await _databaseHandler.AddPlannedExercise(p2);
            await _databaseHandler.AddPlannedExercise(p3);

            await _databaseHandler.AddWorkoutPlanItem(new WorkoutPlanItemModel("1a660c51-6c74-4cce-bfe7-b5d03f5e3d4d", DayOfTheWeek.Monday, p1));
            await _databaseHandler.AddWorkoutPlanItem(new WorkoutPlanItemModel("f1c4e31c-ddfd-4880-9d8d-b9c278f86d8c", DayOfTheWeek.Monday, p2));
            await _databaseHandler.AddWorkoutPlanItem(new WorkoutPlanItemModel("da4c62b3-d01d-4616-868a-e7a8b89885a2", DayOfTheWeek.Monday, p3));
            await _databaseHandler.AddWorkoutPlanItem(new WorkoutPlanItemModel("1d5b70a9-868f-4204-ad50-9a9f14477d22", DayOfTheWeek.Wednesday, p1));
            await _databaseHandler.AddWorkoutPlanItem(new WorkoutPlanItemModel("878cef86-3b4e-423d-822d-d5190498852d", DayOfTheWeek.Wednesday, p2));
            await _databaseHandler.AddWorkoutPlanItem(new WorkoutPlanItemModel("07767dff-aa7a-4c09-8392-b6445ceed9b9", DayOfTheWeek.Friday, p3));

            //var e1 = new CompletedExercise( ExerciseType.FromModel(t1), DateTimeOffset.Now, 3, 12, 100f);
            //var e2 = new CompletedExercise(ExerciseType.FromModel(t2), DateTimeOffset.Now, 2, 9, 99f);
            //await _completedExerciseSaver.SaveCompletedExercise(e1);
            //await _completedExerciseSaver.SaveCompletedExercise(e2);

            //var exerciseTypes = await _databaseHandler.GetExerciseTypes();
            //var plannedExercies = await _databaseHandler.GetPlannedExercises();
            //var workoutPlanItems = await _databaseHandler.GetWorkoutPlan();
            //var completedExercies = await _databaseHandler.GetCompletedExercises();

            //this.workoutPlanItems = workoutPlanItems.AsReadOnly();
        }

        this.workoutPlanItems = await _workoutPlanRetriever.GetWorkoutPlan();
    }
}