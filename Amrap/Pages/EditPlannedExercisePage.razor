@page "/EditPlannedExercise/{PlannedExerciseGuid}/{NavigateBack:bool}"

@using Amrap.Components
@using Amrap.Core;
@using Amrap.Core.Domain;
@using Amrap.Enum;
@using Amrap.Core.Infrastructure;
@using Bit.BlazorUI

@inject NavigationManager _navigationManager
@inject DatabaseHandler _databaseHandler;

<PageTitle>@title</PageTitle>
<BitLabel>@title</BitLabel>

@if (plannedExercise != default)
{
    <ExerciseTypeViewComponent ExerciseType="@plannedExercise.ExerciseType" />
    <BitNumericTextField Label="Sets" Step="@(1)" Min="1" ShowArrows="true" @bind-Value="plannedExercise.Sets" />
    <BitTextField Label="Last sets" IsUnderlined="true" IsReadonly="true" Value="@plannedExercise.GetSets().ToString()" />
    <BitNumericTextField Label="Reps" Step="@(1)" Min="1" ShowArrows="true" @bind-Value="plannedExercise.Reps" />
    <BitTextField Label="Last reps" IsUnderlined="true" IsReadonly="true" Value="@plannedExercise.GetReps().ToString()" />
    <BitNumericTextField Label="Weight" Min="0" IconName="BitIconName.Weights" Suffix=" kg" @bind-Value="plannedExercise.Weight" />
    <BitTextField Label="Last weight" IsUnderlined="true" IsReadonly="true" Value="@plannedExercise.GetWeight().ToString()" />
    <BitTextField Label="Note" IsUnderlined="true" @bind-Value="plannedExercise.Note" />
    <div class="container text-center">
        <div class="row">
            <div class="col-6">
                <BitToggle Label="Drop Set" Style="margin: 0 auto;" IsInlineLabel="true" @bind-Value="plannedExercise.DropSet" />
            </div>
            <div class="col-6">
                <BitToggle Label="To failure" Style="margin: 0 auto;" IsInlineLabel="true" @bind-Value="plannedExercise.ToFailure" />
            </div>
        </div>
    </div>
    <BitNumericTextField LabelPosition="BitNumericTextFieldLabelPosition.Left" Label="Priority" IsEnabled="false" Value="@plannedExercise.Priority" />

    <BitButton Style="margin-top: 20px;" OnClick="Save">Save</BitButton>
    <IsSaved Saved="@saved"/>
}
else
{
    <h3>Loading..</h3>
}

@code {
    [Parameter]
    public string PlannedExerciseGuid { get; set; }

    [Parameter]
    public bool NavigateBack { get; set; }

    private const string title = "Edit planned exercise";

    private PlannedExercise plannedExercise;
    private bool saved;

    protected override async Task OnInitializedAsync()
    {
        plannedExercise = await _databaseHandler.GetPlannedExercise(PlannedExerciseGuid);
    }

    private async Task Save()
    {
        await plannedExercise.Upsert(_databaseHandler);

        if (NavigateBack)
            _navigationManager.NavigateTo($"/plannedexercise/{plannedExercise.WorkoutPlanItemGuid}/{PlannedExerciseGuid}");
        else
            saved = true;
    }
}
