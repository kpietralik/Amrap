@page "/charts"

@using Amrap.Core.Domain;
@using Amrap.Core.Infrastructure;
@using System.Collections.ObjectModel;
@using System.Linq;

@inject DatabaseHandler _databaseHandler;

<PageTitle>@title</PageTitle>

<style>
/*     .chartDiv {
        height: 1400px;
        width: auto;
        background: lightblue;
    }    */ 
    
/*     .chartElement {
        height: 100vh;
        width: 100vw;
    } */

    .chart-wrapper {
        overflow: auto;
        background: lightblue;
    }

    .chart-container {
        width: 100%;
        height: 100%;
        display: inline-grid;
        min-width: 800px;
        min-height: 500px;
        box-sizing: border-box;
        /* background: lightgreen */
    }
</style>
    <div class="chart-wrapper">
        <div class="chart-container">
        @if (_lineChartConfigExample != default)
        {
            <BitChart Config="_lineChartConfigExample" @ref="_lineChartExample" />
        }
    </div>
</div>

@code {
    private const string title = "Chart";

    private BitChartLineConfig _lineChartConfigExample = default;
    private BitChart _lineChartExample = default;

    private int InitalCount = 12;

    protected override async Task OnInitializedAsync()
    {
        var warmUp = await ExerciseType.GetExerciseTypeByGuid(_databaseHandler, "cbe667ec-1409-4a7d-bfd9-f0e825de1c3c");

        var daysOfHistory = 30;
        var now = DateTime.Now;

        //var completedExercises = await CompletedExercise.GetCompletedExercisesForExerciseTypeSinceDate(_databaseHandler, warmUp, DateTime.Now.AddDays(-daysOfHistory));

        // ToDo: temp
        var newL = new List<CompletedExercise>();
        newL.Add(new CompletedExercise(warmUp,   DateTime.Now           , 2, 11, 18.0f, false, false));
        newL.Add(new CompletedExercise(warmUp,  DateTime.Now.AddDays(-7), 3, 10, 14.0f, false, false));
        newL.Add(new CompletedExercise(warmUp, DateTime.Now.AddDays(-14), 3, 9, 13.5f, false, false));
        newL.Add(new CompletedExercise(warmUp, DateTime.Now.AddDays(-21), 4, 14, 11.5f, false, false));
        newL.Add(new CompletedExercise(warmUp, DateTime.Now.AddDays(-28), 5, 10, 9.0f, false, false));
        newL.Add(new CompletedExercise(warmUp, DateTime.Now.AddDays(-35), 4, 12, 3.0f, false, false));

        InitlineChartExample(warmUp.Name, newL, now);
    }

    private void InitlineChartExample(string title, IEnumerable<CompletedExercise> completedExercises, DateTime now)
    {
        var bitChartTimeOptions = new BitChartTimeOptions
        {
            //DisplayFormats =
            IsoWeek = true,
            Unit = BitChartTimeMeasurement.Day, // Or Week?
            Round = BitChartTimeMeasurement.Day,
            //TooltipFormat // https://momentjs.com/docs/#/displaying/format/
            //Min,
            //MinUnit,
            //Max ,
            //StepSize,
        };

        _lineChartConfigExample = new BitChartLineConfig
        {
            Options = new BitChartLineOptions
            {
                Responsive = true,
                Title = new BitChartOptionsTitle
                {
                    Display = true,
                    Text = title
                },
                Tooltips = new BitChartTooltips
                {
                    Mode = BitChartInteractionMode.Nearest,
                    Intersect = true
                },
                Hover = new BitChartHover
                {
                    Mode = BitChartInteractionMode.Nearest,
                    Intersect = true
                },
                Scales = new BitChartScales
                {
                    // Invalid cast
                    // XAxes = (IList<BitChartCartesianAxis>)new List<BitChartTimeAxis>()
                    // {
                    //     new BitChartTimeAxis
                    //     {
                    //         Distribution = BitChartTimeDistribution.Linear,
                    //         Bounds = BitChartScaleBound.Data,
                    //         Time = bitChartTimeOptions
                    //     }
                    // },

                    // JS method not implemented exception
                    // XAxes = new List<BitChartCartesianAxis>
                    // {
                    //     new BitChartTimeAxis
                    //     {
                    //         Distribution = BitChartTimeDistribution.Linear,
                    //         Bounds = BitChartScaleBound.Data,
                    //         Time = new BitChartTimeOptions
                    //         {
                    //             IsoWeek = true,
                    //             Unit = BitChartTimeMeasurement.Day,
                    //             Round = BitChartTimeMeasurement.Day,
                    //         }
                    //     }
                    // },

                    // Data not visible
                    // XAxes = new List<BitChartCartesianAxis>
                    // {
                    //     new BitChartLinearCartesianAxis
                    //     {
                    //         Offset = true
                    //     }
                    // },


                    // From linear chart demo
                    XAxes = new List<BitChartCartesianAxis>
                    {
                        new BitChartCategoryAxis
                        {
                            ScaleLabel = new BitChartScaleLabel
                            {
                                LabelString = "Days ago",
                                Display = true
                            }
                        }
                    },


                    // --- Y Axis ---
                    YAxes = new List<BitChartCartesianAxis>
                    {
                        new BitChartLinearCartesianAxis
                        {
                            ScaleLabel = new BitChartScaleLabel
                            {
                                LabelString = "Value"
                            }
                        }
                    }
                }
            }
        };


        // JS method not implemented exception when used with BitChartTimeAxis
        // IDataset<BitChartTimePoint> dataset1 = new BitChartLineDataset<BitChartTimePoint>(completedExercises.Select(x => new BitChartTimePoint(x.Time, (double)x.Weight)))
        // {
        //     Label = "Weight",
        //     BackgroundColor = BitChartColorUtil.FromDrawingColor(BitChartDemoColors.Red),
        //     BorderColor = BitChartColorUtil.FromDrawingColor(BitChartDemoColors.Red),
        //     Fill = BitChartFillingMode.Disabled
        // };     

        var orderedDescending = completedExercises.OrderByDescending(x => x.Time);

        //Only for category charts
        var oldestEntryDaysAgo = now.Subtract(orderedDescending.Last().Time).Days;

        var labels = Enumerable.Range(0, oldestEntryDaysAgo + 2);

        foreach (var l in labels)
            _lineChartConfigExample.Data.Labels.Add(l.ToString());

        var setsSeries = new List<float>();
        var repsSeries = new List<float>();
        var weightSeries = new List<float>();
        var calculatedMetricSeries = new List<float>();
        for (var i = oldestEntryDaysAgo + 1; i >= 0; i--)
        {
            var day = now.AddDays(-i);
            var latestEntryFromDate = orderedDescending.Where(x => DateOnly.FromDateTime(x.Time.Date) == DateOnly.FromDateTime(day.Date))?.FirstOrDefault();

            if (latestEntryFromDate != default)
            {
                setsSeries.Add(latestEntryFromDate.Sets);
                repsSeries.Add(latestEntryFromDate.Reps);
                weightSeries.Add(latestEntryFromDate.Weight);
                calculatedMetricSeries.Add(latestEntryFromDate.Sets * latestEntryFromDate.Reps * latestEntryFromDate.Weight);
            }
            else 
            {
                setsSeries.Add(setsSeries.LastOrDefault());
                repsSeries.Add(repsSeries.LastOrDefault());
                weightSeries.Add(weightSeries.LastOrDefault());
                calculatedMetricSeries.Add(
                    0.05f *
                    OneOrNonZeroValue(setsSeries.LastOrDefault()) * 
                    OneOrNonZeroValue(repsSeries.LastOrDefault()) * 
                    OneOrNonZeroValue(weightSeries.LastOrDefault()));
            }
        }

        setsSeries.Reverse();
        repsSeries.Reverse();
        weightSeries.Reverse();
        calculatedMetricSeries.Reverse();

        IDataset<float> setsDataset = new BitChartLineDataset<float>(setsSeries)
        {
            Label = "Sets",
            BackgroundColor = BitChartColorUtil.FromDrawingColor(BitChartDemoColors.Blue),
            BorderColor = BitChartColorUtil.FromDrawingColor(BitChartDemoColors.Blue),
            Fill = BitChartFillingMode.Disabled
        };
        IDataset<float> repsDataset = new BitChartLineDataset<float>(repsSeries)
        {
            Label = "Reps",
            BackgroundColor = BitChartColorUtil.FromDrawingColor(BitChartDemoColors.Green),
            BorderColor = BitChartColorUtil.FromDrawingColor(BitChartDemoColors.Green),
            Fill = BitChartFillingMode.Disabled
        };
        IDataset<float> weightDataset = new BitChartLineDataset<float>(weightSeries)
        {
            Label = "Weight",
            BackgroundColor = BitChartColorUtil.FromDrawingColor(BitChartDemoColors.Red),
            BorderColor = BitChartColorUtil.FromDrawingColor(BitChartDemoColors.Red),
            Fill = BitChartFillingMode.Disabled
        };
        IDataset<float> calculatedMetricDataset = new BitChartLineDataset<float>(calculatedMetricSeries)
        {
            Label = "Calculated",
            BackgroundColor = BitChartColorUtil.FromDrawingColor(BitChartDemoColors.Grey),
            BorderColor = BitChartColorUtil.FromDrawingColor(BitChartDemoColors.Grey),
            Fill = BitChartFillingMode.Disabled
        };

        _lineChartConfigExample.Data.Datasets.Add(setsDataset);
        _lineChartConfigExample.Data.Datasets.Add(repsDataset);
        _lineChartConfigExample.Data.Datasets.Add(weightDataset);
        
        // ToDo: Not the best metric. Improve and move to different page?
        // _lineChartConfigExample.Data.Datasets.Add(calculatedMetricDataset);
    }

    public float OneOrNonZeroValue(float value) => value != 0 ? value : 1;

    public static class BitChartDemoColors
    {
        private static readonly Lazy<IReadOnlyList<System.Drawing.Color>> _all = new Lazy<IReadOnlyList<System.Drawing.Color>>(() => new System.Drawing.Color[7]
        {
                Red, Orange, Yellow, Green, Blue, Purple, Grey
        });

        public static IReadOnlyList<System.Drawing.Color> All => _all.Value;

        public static readonly System.Drawing.Color Red = System.Drawing.Color.FromArgb(255, 99, 132);
        public static readonly System.Drawing.Color Orange = System.Drawing.Color.FromArgb(255, 159, 64);
        public static readonly System.Drawing.Color Yellow = System.Drawing.Color.FromArgb(255, 205, 86);
        public static readonly System.Drawing.Color Green = System.Drawing.Color.FromArgb(75, 192, 192);
        public static readonly System.Drawing.Color Blue = System.Drawing.Color.FromArgb(54, 162, 235);
        public static readonly System.Drawing.Color Purple = System.Drawing.Color.FromArgb(153, 102, 255);
        public static readonly System.Drawing.Color Grey = System.Drawing.Color.FromArgb(201, 203, 207);
    }
}
