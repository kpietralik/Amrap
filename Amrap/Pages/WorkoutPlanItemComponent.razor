@using Amrap.Core;
@using Amrap.Core.Domain;
@using Amrap.Core.Models;
@using Bit.BlazorUI

@inject CompletedExerciseSaver _completedExerciseSaver;

<div id="component" class="flex flex-row justify-between">
    <div class="flex flex-col basis-3/4">
        <div class="flex-row">
            <div class="divTable" style="border: 4px solid #000;">
                <div class="divTableBody">
                    <div class="divTableRow">
                        <div class="divTableCell">Day</div>
                        <div class="divTableCell">@Item.Day</div>
                    </div>
                    <div class="divTableRow">
                        <div class="divTableCell">Exercise</div>
                        <div class="divTableCell">@Item.PlannedExercise.ExerciseType.Name</div>
                    </div>
                    <div class="divTableRow">
                        <div class="divTableCell">Description</div>
                        <div class="divTableCell">@Item.PlannedExercise.ExerciseType.Description</div>
                    </div>
                    <div class="divTableRow">
                        <div class="divTableCell">Sets</div>
                        <div class="divTableCell">@Item.GetSets()</div>
                    </div>
                    <div class="divTableRow">
                        <div class="divTableCell">Reps</div>
                        <div class="divTableCell">@Item.GetReps()</div>
                    </div>
                    <div class="divTableRow">
                        <div class="divTableCell">Weight</div>
                        <div class="divTableCell">@Item.GetWeight()</div>
                    </div>
                    <div class="divTableRow">
                        <div class="divTableCell">Drop set</div>
                        <div class="divTableCell">@(Item.GetDropSet() ? "Yes" : "No")</div>
                    </div>
                    <div class="divTableRow">
                        <div class="divTableCell">To failure</div>
                        <div class="divTableCell">@(Item.GetToFailure() ? "Yes" : "No")</div>
                    </div>
                </div>
            </div>
            <BitAccordion Title="more">
                @*<button class="btn btn-primary" @onclick="SaveCompletedExercise">Complete</button>*@
                <BitTextField Label="Sets" IsUnderlined="true" @bind-Value="@newSetsText" />
                <BitTextField Label="Reps" IsUnderlined="true" @bind-Value="@newRepsText" />
                <BitTextField Label="Weight" IsUnderlined="true" @bind-Value="@newWeightText" />
                <BitCheckbox Label="Drop Set" @bind-Value="@newDropSet" BoxSide="@BitCheckBoxSide.End" />
                <BitCheckbox Label="To failure" @bind-Value="@newToFailure" BoxSide="@BitCheckBoxSide.End" />

                <BitButton Style="margin-top: 20px;" OnClick="SaveCompletedExercise" >Complete</BitButton>

            </BitAccordion>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Amrap.Core.Domain.WorkoutPlanItem Item { get; set; }

    private string newSetsText;
    private int newSets;
    private string newRepsText;
    private int newReps;
    private string newWeightText;
    private float newWeight;
    private bool newDropSet;
    private bool newToFailure;


    protected override async Task OnInitializedAsync()
    {
        newSets = Item.GetSets();
        newSetsText = newSets.ToString();
        newReps = Item.GetReps();
        newRepsText = newReps.ToString();
        newWeight = Item.GetWeight();
        newWeightText = newWeight.ToString();
        newDropSet = Item.GetDropSet();
        newToFailure = Item.GetToFailure();
    }

    public async Task SaveCompletedExercise()
    {
        //await Application.Current.MainPage.DisplayActionSheet("tit", "canc", "dest", "button1");
        //await Application.Current.MainPage.DisplayPromptAsync("tit", "canc", "dest", "button1");

        // ToDo: box which reads these properties - defaults based on last completed exercise or planned exercise
        // ToDo: model with LastCompletedStats for each PlannedExercise for easier storage of that data

        if (!int.TryParse(newSetsText, out var sets) || sets < 0)
        {
            await App.Current.MainPage.DisplayAlert("Invalid input", "Sets must be a positive integer value", "Ok");
            return;
        }

        if (!int.TryParse(newRepsText, out var reps) || reps < 0)
        {
            await App.Current.MainPage.DisplayAlert("Invalid input", "Reps must be a positive integer value", "Ok");
            return;
        }

        if (!float.TryParse(newWeightText, out var weight) || weight < 0)
        {
            await App.Current.MainPage.DisplayAlert("Invalid input", "Sets must be a positive number", "Ok");
            return;
        }

        //var completedExercise = new CompletedExercise(Item.PlannedExercise.ExerciseType, DateTimeOffset.Now, sets, reps, weight, dropSet);
        var completedExercise = new CompletedExerciseModel(
            Item.PlannedExercise.ExerciseType.Guid, DateTimeOffset.Now, sets, reps, weight, newDropSet, newToFailure);

        await _completedExerciseSaver.SaveCompletedExercise(completedExercise, Item.PlannedExercise.Guid);

        // "The render handle is not yet assigned.
        //await BasicSnackBarRef.Show(BasicSnackBarTitle, BasicSnackBarBody, BasicSnackBarType);
    }
}
