@using Amrap.Core;
@using Amrap.Core.Domain;
@using Amrap.Core.Models;

@inject CompletedExerciseSaver _completedExerciseSaver;

<div id="component" class="flex flex-row justify-between">
    <div class="flex flex-col basis-3/4">
        <div class="flex-row">
            <div class="divTable" style="border: 4px solid #000;">
                <div class="divTableBody">
                    <div class="divTableRow">
                        <div class="divTableCell">Day</div>
                        <div class="divTableCell">@Item.Day</div>
                    </div>
                    <div class="divTableRow">
                        <div class="divTableCell">Exercise</div>
                        <div class="divTableCell">@Item.PlannedExercise.ExerciseType.Name</div>
                    </div>
                    <div class="divTableRow">
                        <div class="divTableCell">Description</div>
                        <div class="divTableCell">@Item.PlannedExercise.ExerciseType.Description</div>
                    </div>
                    @if (Item.PlannedExercise.LastStats != default)
                    {
                        <div class="divTableRow">
                            <div class="divTableCell">Last Sets</div>
                            <div class="divTableCell">@Item.PlannedExercise.LastStats.Sets</div>
                        </div>
                        <div class="divTableRow">
                            <div class="divTableCell">Last Reps</div>
                            <div class="divTableCell">@Item.PlannedExercise.LastStats.Reps</div>
                        </div>
                        <div class="divTableRow">
                            <div class="divTableCell">Last Weight</div>
                            <div class="divTableCell">@Item.PlannedExercise.LastStats.Weight</div>
                        </div>
                        <div class="divTableRow">
                            <div class="divTableCell">Was drop set</div>
                            <div class="divTableCell">@(Item.PlannedExercise.LastStats.DropSet ? "Yes" : "No")</div>
                        </div>
                    }
                    else
                    {
                        <div class="divTableRow">
                            <div class="divTableCell">Sets</div>
                            <div class="divTableCell">@Item.PlannedExercise.Sets</div>
                        </div>
                        <div class="divTableRow">
                            <div class="divTableCell">Reps</div>
                            <div class="divTableCell">@Item.PlannedExercise.Reps</div>
                        </div>
                        <div class="divTableRow">
                            <div class="divTableCell">Weight</div>
                            <div class="divTableCell">@Item.PlannedExercise.Weight</div>
                        </div>
                        <div class="divTableRow">
                            <div class="divTableCell">Drop set</div>
                            <div class="divTableCell">@(Item.PlannedExercise.DropSet ? "Yes" : "No")</div>
                        </div>
                    }
                    <div class="divTableRow">
                        <div class="divTableCell">To failure</div>
                        <div class="divTableCell">@Item.PlannedExercise.ToFailure</div>
                    </div>
                </div>
            </div>
            <button class="btn btn-primary" @onclick="SaveCompletedExercise">Complete</button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Amrap.Core.Domain.WorkoutPlanItem Item { get; set; }

    protected override async Task OnInitializedAsync()
    {
    }

    public async Task SaveCompletedExercise()
    {
        // ToDo: box which reads these properties - defaults based on last completed exercise or planned exercise
        // ToDo: model with LastCompletedStats for each PlannedExercise for easier storage of that data

        int sets = Item.PlannedExercise.Sets;
        int reps = Item.PlannedExercise.Reps;
        float weight = Item.PlannedExercise.Weight;
        bool dropSet = Item.PlannedExercise.DropSet;

        //var completedExercise = new CompletedExercise(Item.PlannedExercise.ExerciseType, DateTimeOffset.Now, sets, reps, weight, dropSet);
        var completedExercise = new CompletedExerciseModel(
            Item.PlannedExercise.ExerciseType.Guid, DateTimeOffset.Now, sets, reps, weight, dropSet);

        await _completedExerciseSaver.SaveCompletedExercise(completedExercise, Item.PlannedExercise.Guid);
    }
}
