@using Amrap.Core;
@using Amrap.Core.Domain;
@using Amrap.Core.Infrastructure;
@using Bit.BlazorUI

@inject NavigationManager NavigationManager;
@inject DatabaseHandler _databaseHandler;

<WorkoutPlanItemViewComponent WorkoutPlanItem="@Item" />
<BitAccordion>
    <HeaderTemplate Context="isExpanded">
        <BitIconButton IconName="isExpanded ? BitIconName.ChevronDown : BitIconName.ChevronRight" />
        <div class="custom-header">
            <span class="custom-title">more</span>
        </div>
    </HeaderTemplate>
    <ChildContent>
        <BitNumericTextField Label="Sets" IsUnderlined="true" Step="@(1)" Min="1" ShowArrows="true" @bind-Value="@newSets" />
        <BitNumericTextField Label="Reps" IsUnderlined="true" Step="@(1)" Min="1" ShowArrows="true" @bind-Value="@newReps" />
        <BitNumericTextField Label="Weight" IsUnderlined="true" Step="@(0.5)" Min="1" IconName="BitIconName.Weights" 
            Suffix=" kg" ShowArrows="true" @bind-Value="@newWeight" />
        <BitCheckbox Label="Drop Set" @bind-Value="@newDropSet" BoxSide="@BitCheckBoxSide.Start" />
        <BitCheckbox Label="To failure" @bind-Value="@newToFailure" BoxSide="@BitCheckBoxSide.Start" />
        <BitNumericTextField Label="Priority" IsUnderlined="true" Min="0" @bind-Value="@newPriority" />

        <BitActionButton Style="margin-top: 20px;" IconName="BitIconName.Send" OnClick="Complete">Complete</BitActionButton>
        @if (completed)
        {
            <BitMessageBar MessageBarType="@BitMessageBarType.Success">
                Completed
            </BitMessageBar>
        }
        <br />
        <BitActionButton Style="margin-top: 20px;" IconName="BitIconName.Edit" OnClick="Edit">Edit</BitActionButton>
        <br />
        <BitActionButton Style="margin-top: 20px;" IconName="BitIconName.Delete" OnClick="Delete">Delete</BitActionButton>
        @if (deleted)
        {
            <BitMessageBar MessageBarType="@BitMessageBarType.Warning">
                Deleted
            </BitMessageBar>
        }
    </ChildContent>
</BitAccordion>
<br />

@code {
    [Parameter]
    public Amrap.Core.Domain.WorkoutPlanItem Item { get; set; }

    private int newSets { get; set; }
    private int newReps { get; set; }
    private double newWeight { get; set; }
    private double newPriority { get; set; }
    private bool newDropSet;
    private bool newToFailure;

    private bool completed = false;
    private bool deleted = false;

    private const string InvalidInput = "Invalid input";
    private const string Ok = "Ok";

    protected override async Task OnInitializedAsync()
    {
        newSets = Item.GetSets();
        newReps = Item.GetReps();
        newWeight = Item.GetWeight();
        newDropSet = Item.GetDropSet();
        newToFailure = Item.GetToFailure();
        newPriority = Item.Priority;
    }

    public async Task Complete()
    {
        var newPriorityF = (float)newPriority;
        if (newPriorityF != Item.Priority)
        {
            Item.Priority = newPriorityF;
            await Item.Update(_databaseHandler);
        }

        var completedExercise = new CompletedExercise(
            Item.PlannedExercise.ExerciseType,
            DateTimeOffset.Now,
            newSets,
            newReps,
            (float)newWeight,
            newDropSet,
            newToFailure);

        await completedExercise.SaveCompletedExercise(_databaseHandler, Item.PlannedExercise);
        completed = true;
    }

    public void Edit()
    {
        NavigationManager.NavigateTo(Item.Link);
    }

    public async Task Delete()
    {
        var r = await App.Current.MainPage.DisplayActionSheet(
            $"Delete {Item.PlannedExercise.ExerciseType.Name}?", "Cancel", "Delete");

        if (r == "Delete")
        {
            await Item.Delete(_databaseHandler);
            deleted = true;
        }
    }
}
