@page "/debug"
@using Amrap.Core.Infrastructure;
@using Bit.BlazorUI
@using System.Text.Json;

@inject DatabaseHandler _databaseHandler;

<PageTitle>@title</PageTitle>
<BitLabel>@title</BitLabel>

<BitTextField Label="Has Internet access?" @bind-Value="HasInternetAccessString" HasBorder="true" IsReadonly="true" IsTrimmed="true" />
<BitTextField Label="Name" @bind-Value="name" HasBorder="true" IsReadonly="true" IsTrimmed="true" />
<BitTextField Label="Package" @bind-Value="package" HasBorder="true" IsReadonly="true" IsTrimmed="true" />
<BitTextField Label="Version" @bind-Value="version" HasBorder="true" IsReadonly="true" IsTrimmed="true" />
<BitTextField Label="Build" @bind-Value="build" HasBorder="true" IsReadonly="true" IsTrimmed="true" />

<BitTextField Label="Version Tracking" @bind-Value="versionTracking" HasBorder="true" IsReadonly="true" IsTrimmed="false" IsMultiline="true" />
<BitTextField Label="App Info" @bind-Value="appInfo" HasBorder="true" IsReadonly="true" IsTrimmed="false" IsMultiline="true" />

<br />
<br />
<BitButton Style="margin-top: 20px;" OnClick="RecreateDatabaseKeepAchievements">Recreate Database keeping achievements</BitButton>
@if (databaseRecreated)
{
    <BitMessageBar MessageBarType="@BitMessageBarType.Success">
        Database recreated and kept achievements
    </BitMessageBar>
}

<br />
<br />
<BitTextField Label="Exercise types Url" @bind-Value="@exerciseTypesUrl" HasBorder="true" IsRequired="true" IsTrimmed="true" />
<BitTextField Label="Workout plan Url" @bind-Value="@workoutPlanUrl" HasBorder="true" IsRequired="true" IsTrimmed="true" />
<BitButton Style="margin-top: 20px;" OnClick="SeedDatabase">Seed Database</BitButton>
@if (databaseSeeded)
{
    <BitMessageBar MessageBarType="@BitMessageBarType.Success">
        Database seeded
    </BitMessageBar>
}

<br />
<br />
<BitButton Style="margin-top: 20px;" OnClick="RecreateDatabaseDeleteAll">Recreate Database deleting all data</BitButton>
@if (wholeDatabaseRecreated)
{
    <BitMessageBar MessageBarType="@BitMessageBarType.Success">
        Database recreated
    </BitMessageBar>
}

<br />
<br />
<BitButton Style="margin-top: 20px;" OnClick="ExportCompletedExercises">Export Completed Exercises</BitButton>
@if (completedExercisesExported)
{
    <BitMessageBar MessageBarType="@BitMessageBarType.Success">
        Completed Exercises Exported
    </BitMessageBar>
}

<br />
<br />
<BitButton Style="margin-top: 20px;" OnClick="ImportCompletedExercises">Import Completed Exercises</BitButton>
@if (completedExercisesImported)
{
    <BitMessageBar MessageBarType="@BitMessageBarType.Success">
        Completed Exercises Imported
    </BitMessageBar>
}

<br />
<br />
<BitButton Style="margin-top: 20px;" OnClick="ExportExerciseTypes">Export Exercise Types</BitButton>
@if (exerciseTypesExported)
{
    <BitMessageBar MessageBarType="@BitMessageBarType.Success">
        Exported Exercise Types
    </BitMessageBar>
}

<br />
<br />
<BitButton Style="margin-top: 20px;" OnClick="ImportExerciseTypes">Import Exercise Types</BitButton>
@if (exerciseTypesImported)
{
    <BitMessageBar MessageBarType="@BitMessageBarType.Success">
        Imported Exercise Types
    </BitMessageBar>
}

<br />
<br />
<BitButton Style="margin-top: 20px;" OnClick="ExportWorkoutPlan">Export Workout Plan</BitButton>
@if (workoutPlanExported)
{
    <BitMessageBar MessageBarType="@BitMessageBarType.Success">
        Exported Workout Plan
    </BitMessageBar>
}

<br />
<br />
<BitButton Style="margin-top: 20px;" OnClick="ImportWorkoutPlan">Import Workout Plan</BitButton>
@if (workoutPlanImported)
{
    <BitMessageBar MessageBarType="@BitMessageBarType.Success">
        Imported Workout Plan
    </BitMessageBar>
}

<br/>

@code {
    private const string title = "Debug";

    private bool databaseRecreated = false;
    private bool databaseSeeded = false;
    private bool wholeDatabaseRecreated = false;

    private bool completedExercisesExported = false;    
    private bool completedExercisesImported = false;

    private bool exerciseTypesExported = false;
    private bool exerciseTypesImported = false;

    private bool workoutPlanExported = false;
    private bool workoutPlanImported = false;

    // App info
    private string name = AppInfo.Current.Name;
    private string package = AppInfo.Current.PackageName;
    private string version = AppInfo.Current.VersionString;
    private string build = AppInfo.Current.BuildString;

    // Serialized version
    private string versionTracking;
    private string appInfo;

    // Sample values
    private string exerciseTypesUrl;
    private string workoutPlanUrl;

    protected override async Task OnInitializedAsync()
    {
        versionTracking = JsonSerializer.Serialize(VersionTracking.Default);
        appInfo = JsonSerializer.Serialize(AppInfo.Current);


        HasInternetAccessString = HasInternetAccess() ? "Yes" : "No";
        exerciseTypesUrl = await SecureStorage.Default.GetAsync(Consts.ExerciseTypesUrlKey);
        workoutPlanUrl = await SecureStorage.Default.GetAsync(Consts.WorkoutPlanUrlKey);
    }

    private string HasInternetAccessString { get; set; }

    private bool HasInternetAccess()
    {
        var accessType = Connectivity.Current.NetworkAccess;

        return 
            accessType is NetworkAccess.Internet ||
            accessType is NetworkAccess.ConstrainedInternet;
    }

    private async Task RecreateDatabaseDeleteAll()
    {
        var r = await App.Current.MainPage.DisplayActionSheet(
            $"Delete all data?", "Cancel", "Delete");

        if (r == "Delete")
        {
            await _databaseHandler.CreateConnectionAndTables(true, false);
            wholeDatabaseRecreated = true;
        }
    }

    private async Task RecreateDatabaseKeepAchievements()
    {
        await _databaseHandler.CreateConnectionAndTables(true, true);
        databaseRecreated = true;
    }

    private async Task SeedDatabase()
    {
        await DbUtils.SeedData(_databaseHandler, new Uri(exerciseTypesUrl), new Uri(workoutPlanUrl));
        databaseSeeded = true;

        await SecureStorage.Default.SetAsync(Consts.ExerciseTypesUrlKey, exerciseTypesUrl);
        await SecureStorage.Default.SetAsync(Consts.WorkoutPlanUrlKey, workoutPlanUrl);
    }

    private async Task ExportCompletedExercises()
    {
        if (await DbUtils.ExportCompletedExercises(_databaseHandler))
            completedExercisesExported = true;
    }

    private async Task ImportCompletedExercises()
    {
        if (await DbUtils.ImportCompletedExercises(_databaseHandler))
            completedExercisesImported = true;
    }

    private async Task ExportExerciseTypes()
    {
        if (await DbUtils.ExportExerciseTypes(_databaseHandler))
            exerciseTypesExported = true;
    }

    private async Task ImportExerciseTypes()
    {
        if (await DbUtils.ImportExerciseTypes(_databaseHandler))
            exerciseTypesImported = true;
    }

    private async Task ExportWorkoutPlan()
    {
        if (await DbUtils.ExportWorkoutPlan(_databaseHandler))
            workoutPlanExported = true;
    }

    private async Task ImportWorkoutPlan()
    {
        if (await DbUtils.ImportWorkoutPlan(_databaseHandler))
            workoutPlanImported = true;
    }
}
