@page "/debug"
@using Amrap.Core.Infrastructure;
@using Bit.BlazorUI

@inject DatabaseHandler _databaseHandler;

<PageTitle>@title</PageTitle>
<BitLabel>@title</BitLabel>

@if (HasInternetAccess())
{
    <h3>Has internet access</h3>
}
else
{
    <h3>No internet access</h3>
}

<BitTextField IsReadonly="true" Value="@firstRun" Label="First run?" />
<BitButton Style="margin-top: 20px;" OnClick="ClearFirstRun">Clear FirstRun</BitButton>
@if (firstRunCleared)
{
    <BitMessageBar MessageBarType="@BitMessageBarType.Success">
        Cleared first run flag
    </BitMessageBar>
}

<br />
<br />
<BitButton Style="margin-top: 20px;" OnClick="RecreateDatabaseKeepAchievements">Recreate Database keeping achievements</BitButton>
@if (databaseRecreated)
{
    <BitMessageBar MessageBarType="@BitMessageBarType.Success">
        Database recreated and kept achievements
    </BitMessageBar>
}

<br />
<br />
<BitTextField Label="Exercise types Url" @bind-Value="@exerciseTypesUrl" HasBorder="true" IsRequired="true" IsTrimmed="true" />
<BitTextField Label="Workout plan Url" @bind-Value="@workoutPlanUrl" HasBorder="true" IsRequired="true" IsTrimmed="true" />
<BitButton Style="margin-top: 20px;" OnClick="SeedDatabase">Seed Database</BitButton>
@if (databaseSeeded)
{
    <BitMessageBar MessageBarType="@BitMessageBarType.Success">
        Database seeded
    </BitMessageBar>
}

<br />
<br />
<BitButton Style="margin-top: 20px;" OnClick="RecreateDatabaseDeleteAll">Recreate Database deleting all data</BitButton>
@if (wholeDatabaseRecreated)
{
    <BitMessageBar MessageBarType="@BitMessageBarType.Success">
        Database recreated
    </BitMessageBar>
}

<br />
<br />
<BitButton Style="margin-top: 20px;" OnClick="ExportCompletedExercises">Export Completed Exercises</BitButton>
@if (completedExercisesExported)
{
    <BitMessageBar MessageBarType="@BitMessageBarType.Success">
        Completed Exercises Exported
    </BitMessageBar>
}

<br />
<br />
<BitButton Style="margin-top: 20px;" OnClick="ImportCompletedExercises">Import Completed Exercises</BitButton>
@if (completedExercisesImported)
{
    <BitMessageBar MessageBarType="@BitMessageBarType.Success">
        Completed Exercises Imported
    </BitMessageBar>
}

<br />
<br />
<BitButton Style="margin-top: 20px;" OnClick="ExportExerciseTypes">Export Exercise Types</BitButton>
@if (exerciseTypesExported)
{
    <BitMessageBar MessageBarType="@BitMessageBarType.Success">
        Export Exercise Types
    </BitMessageBar>
}

<br />
<br />
<BitButton Style="margin-top: 20px;" OnClick="ImportExerciseTypes">Import Exercise Types</BitButton>
@if (exerciseTypesImported)
{
    <BitMessageBar MessageBarType="@BitMessageBarType.Success">
        Import Exercise Types
    </BitMessageBar>
}

<br />
<br />
<BitButton Style="margin-top: 20px;" OnClick="ExportWorkoutPlan">Export Workout Plan</BitButton>
@if (workoutPlanExported)
{
    <BitMessageBar MessageBarType="@BitMessageBarType.Success">
        Export Exercise Types
    </BitMessageBar>
}

<br />
<br />
<BitButton Style="margin-top: 20px;" OnClick="ImportWorkoutPlan">Import Workout Plan</BitButton>
@if (workoutPlanImported)
{
    <BitMessageBar MessageBarType="@BitMessageBarType.Success">
        Import Workout Plan
    </BitMessageBar>
}

<br/>

@code {
    private const string title = "Debug";

    private string firstRun;
    private bool firstRunCleared = false;

    private bool databaseRecreated = false;
    private bool databaseSeeded = false;
    private bool wholeDatabaseRecreated = false;

    private bool completedExercisesExported = false;    
    private bool completedExercisesImported = false;

    private bool exerciseTypesExported = false;
    private bool exerciseTypesImported = false;

    private bool workoutPlanExported = false;
    private bool workoutPlanImported = false;

    // Sample values
    private string exerciseTypesUrl = "https://gist.githubusercontent.com/kpietralik/22cb941b0a3a9e1948a55686ef4c3067/raw/af804dfd90707a93f654f9908152bb233bd3b447/exerciseTypes.json";
    private string workoutPlanUrl = "https://gist.githubusercontent.com/kpietralik/32a930f80bfe1491b3e61e515676519d/raw/bb4a9f1568ee705535737382513936743cddfb68/workoutPlan.json";

    protected override async Task OnInitializedAsync()
    {
        firstRun = await SecureStorage.Default.GetAsync(Consts.FirstRunKey);
    }

    public bool HasInternetAccess()
    {
        var accessType = Connectivity.Current.NetworkAccess;

        return 
            accessType is NetworkAccess.Internet ||
            accessType is NetworkAccess.ConstrainedInternet;
    }

    public async Task ClearFirstRun()
    {
        await SecureStorage.Default.SetAsync(Consts.FirstRunKey, Consts.NullValue);
        firstRunCleared = true;
    }

    public async Task RecreateDatabaseDeleteAll()
    {
        var r = await App.Current.MainPage.DisplayActionSheet(
            $"Delete all data?", "Cancel", "Delete");

        if (r == "Delete")
        {
            await _databaseHandler.CreateConnectionAndTables(true, false);
            wholeDatabaseRecreated = true;
        }
    }

    public async Task RecreateDatabaseKeepAchievements()
    {
        await _databaseHandler.CreateConnectionAndTables(true, true);
        databaseRecreated = true;
    }

    public async Task SeedDatabase()
    {
        await DbUtils.SeedDataIfNeeded(_databaseHandler, new Uri(exerciseTypesUrl), new Uri(workoutPlanUrl), true);
        databaseSeeded = true;
    }

    public async Task ExportCompletedExercises()
    {
        if (await DbUtils.ExportCompletedExercises(_databaseHandler))
            completedExercisesExported = true;
    }

    public async Task ImportCompletedExercises()
    {
        if (await DbUtils.ImportCompletedExercises(_databaseHandler))
            completedExercisesImported = true;
    }

    public async Task ExportExerciseTypes()
    {
        if (await DbUtils.ExportExerciseTypes(_databaseHandler))
            exerciseTypesExported = true;
    }

    public async Task ImportExerciseTypes()
    {
        if (await DbUtils.ImportExerciseTypes(_databaseHandler))
            exerciseTypesImported = true;
    }

    public async Task ExportWorkoutPlan()
    {
        if (await DbUtils.ExportWorkoutPlan(_databaseHandler))
            workoutPlanExported = true;
    }

    public async Task ImportWorkoutPlan()
    {
        if (await DbUtils.ImportWorkoutPlan(_databaseHandler))
            workoutPlanImported = true;
    }
}
