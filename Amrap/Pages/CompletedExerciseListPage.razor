@page "/completed"
@using Amrap.Core;
@using Amrap.Core.Domain;
@using Amrap.Core.Infrastructure;
@using Bit.BlazorUI

@inject CompletedExerciseReader _completedExerciseReader;

<PageTitle>@title</PageTitle>

<style>
    .exerciseImg {
        max-width: 100px;
        height: auto
    }
</style>

@if (items == null)
{
    <h1>Loading...</h1>
}
else if (items != null)
{
    <div class="row">
        <div class="col-6">
            <BitTextField IsUnderlined="false" HasBorder="false" IsReadonly="true" Value="@listText" />
        </div>
        <div class="col-3">
            <BitIconButton IconName="BitIconName.Filter" OnClick="async () => await FilterToggle()" />
        </div>
        <div class="col-3">
            @* Left for UI consistency *@
        </div>
    </div>
    @if (filterToggle)
    {
        <div class="row">
            <div class="col">
                <BitTextField IconName="BitIconName.Filter" IsUnderlined="false" HasBorder="true" @bind-Value="filterValue" OnChange="async () => await OnFilterValueChange()" />
            </div>
        </div>
    }
    <BitBasicList Items="items"
                  EnableVirtualization="false"
                  Style="border: 1px #a19f9d solid; border-radius: 3px; height: 100%">
        <RowTemplate Context="item">
            <div @key="item.Id" style="border-bottom: 1px #8a8886 solid; padding: 2px 10px; margin: 5px;">
                <div style="margin-left:3%; display: inline-block;">
                    <CompletedExerciseComponent Item="@item" />
                </div>
            </div>
        </RowTemplate>
    </BitBasicList>
}

@code {
    private const string title = "Completed Exercises";

    private string listText => $"Completed exercises ({items.Count()})";

    private IOrderedEnumerable<CompletedExercise> _completedExerciseItems;
    private IList<CompletedExercise> items;

    private bool filterToggle = false;
    private string filterValue = string.Empty;

    private async Task FilterToggle()
    {
        filterToggle = !filterToggle;
        filterValue = string.Empty;
        items = _completedExerciseItems.ToList();
    }

    private async Task OnFilterValueChange()
    {
        if (!filterToggle)
            return;

        items = _completedExerciseItems.Where(x => FilterByValue(x, filterValue)).ToList();
    }

    private bool FilterByValue(CompletedExercise item, string value)
    => string.IsNullOrEmpty(value) ||
       item.ExerciseType.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase);

    protected override async Task OnInitializedAsync()
    {
        _completedExerciseItems = await _completedExerciseReader.ReadCompletedExercies();
        items = _completedExerciseItems.ToList();
    }
}